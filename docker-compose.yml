#todo saving cost of images
x-app: &default-app
  image: app:0.0.1
#  image: registry.gitlab.com/maitrungduc1410/cicd-automation-test:latest
  build:
    context: "."
    dockerfile: ./.dockerdev/Dockerfile
    target: "app"
    args:
      - "BUNDLE_WITHOUT=${BUNDLE_WITHOUT:-development:test}"
      - "BUNDLE_FROZEN=${BUNDLE_FROZEN:-1}"
      - "UID=${UID:-1000}"
      - "GID=${GID:-1000}"
      - "RAILS_ENV=${RAILS_ENV:-production}"
      - "NODE_ENV=${NODE_ENV:-production}"
      - "RUBY_VERSION=${RUBY_VERSION:-3.3.3}"
      - "PG_MAJOR=${PG_MAJOR:-16}"
      - "BUNDLER_VERSION={BUNDLER_VERSION:-2.3.15}"
      - "NODE_MAJOR=${NODE_MAJOR:-20}"
#  image: example-app:0.0.1
  tmpfs:
    - /tmp
  logging:
    driver: "json-file"
    options:
      max-size: "100m"
      max-file: '3'
  env_file:
    - ".env"
  restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
  stop_grace_period: "3s"
  tty: true
  stdin_open: true
  depends_on:
    postgres:
      condition: "service_started"
      required: false
    redis:
      condition: "service_started"
      required: false
  volumes:
    - rails_cache:/app/tmp/cache
    - build_asset:/app/assets/builds
    - bundle_cache:/usr/local/bundle
    - assets:/app/public/assets
    - "${DOCKER_WEB_VOLUME:-./public:/app/public:cached}"
    - .dockerdev/.psqlrc:/root/.psqlrc:ro
x-assets: &default-assets
  image: assets:0.0.1
  build:
    context: "."
    dockerfile: ./.dockerdev/Dockerfile
    target: "assets"
    args:
      - "BUNDLE_WITHOUT=${BUNDLE_WITHOUT:-development:test}"
      - "BUNDLE_FROZEN=${BUNDLE_FROZEN:-1}"
      - "UID=${UID:-1000}"
      - "GID=${GID:-1000}"
      - "RAILS_ENV=${RAILS_ENV:-production}"
      - "NODE_ENV=${NODE_ENV:-production}"
      - "RUBY_VERSION=${RUBY_VERSION:-3.3.3}"
      - "NODE_MAJOR=${NODE_MAJOR:-20}"
  env_file:
    - ".env"
  profiles: [ "assets" ]
  restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
  stop_grace_period: "3s"
  tty: true
  volumes:
    - assets:/app/public/assets
    - build_asset:/app/assets/builds
    - bundle_cache:/usr/local/bundle
    - yarn_cache:/yarn
    - node_modules_cache:/node_modules
    - "${DOCKER_WEB_VOLUME:-./public:/app/public:cached}"
services:
  postgres:
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_POSTGRES_CPUS:-0}"
          memory: "${DOCKER_POSTGRES_MEMORY:-0}"
    build:
      context: .
      dockerfile: ./.dockerdev/postgres/Dockerfile
      args:
        - "PG_VERSION=${PG_VERSION:-16.3}"
    environment:
      PSQL_HISTFILE: "/root/log/.psql_history"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      # POSTGRES_DB: "${POSTGRES_DB}"
    profiles: [ "postgres" ]
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "3s"
    healthcheck:
      test:
        - CMD
        - pg_isready
        - '-q'
#        - '-d'
#        - '${DB_DATABASE}'
        - '-U'
        - '${POSTGRES_USER}'
        - '-h'
        - '127.0.0.1'
      retries: 3
      timeout: 5s
    ports:
      - "5432:5432"
    volumes:
      - "postgres:/var/lib/postgresql/data"
      - .dockerdev/.psqlrc:/root/.psqlrc:ro
      - ./log:/root/log:cached
  redis:
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_REDIS_CPUS:-0}"
          memory: "${DOCKER_REDIS_MEMORY:-0}"
    image: "redis:7.2.5-alpine"
    profiles: [ "redis" ]
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "3s"
    ports:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - "redis:/data"

  web:
    <<: *default-app
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_WEB_CPUS:-0}"
          memory: "${DOCKER_WEB_MEMORY:-0}"
    healthcheck:
      test: "${DOCKER_WEB_HEALTHCHECK_TEST:-curl localhost:${PORT:-8000}/up}"
      interval: "60s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    ports:
      - "${DOCKER_WEB_PORT_FORWARD:-127.0.0.1:8000}:${PORT:-8000}"
    profiles: [ "web" ]
    depends_on:
      js:
        condition: "service_started"
        required: false
      css:
        condition: "service_started"
        required: false
  worker:
    <<: *default-app
    command: "bundle exec sidekiq -C config/sidekiq.yml"
    entrypoint: [ ]
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_WORKER_CPUS:-0}"
          memory: "${DOCKER_WORKER_MEMORY:-0}"
    profiles: [ "worker" ]
  cable:
    <<: *default-app
    command: "puma -p ${CABLE_PORT} cable/config.ru"
    entrypoint: [ ]
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_CABLE_CPUS:-0}"
          memory: "${DOCKER_CABLE_MEMORY:-0}"
    ports:
      - "${DOCKER_CABLE_PORT_FORWARD:-127.0.0.1:28080}:${CABLE_PORT:-28080}"
    profiles: [ "cable" ]
  js:
    <<: *default-assets
    command: "yarn build"
    profiles: [ "web" ]
  css:
    <<: *default-assets
    command: "yarn build:css"
    profiles: [ "web" ]
  minio:
    image: 'minio/minio:latest'
    ports:
      - '${FORWARD_MINIO_PORT:-9000}:9000'
      - '${FORWARD_MINIO_CONSOLE_PORT:-8900}:8900'
    environment:
      MINIO_ROOT_USER: sail
      MINIO_ROOT_PASSWORD: password
    volumes:
      - 'minio:/data/minio'
#    networks:
#      - sail
    command: 'minio server /data/minio --console-address ":8900"'
    healthcheck:
      test:
        - CMD
        - curl
        - '-f'
        - 'http://localhost:9000/minio/health/live'
      retries: 3
      timeout: 5s
  mailpit:
    image: 'axllent/mailpit:latest'
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    volumes:
      - mailpit:/data
    ports:
      - '${FORWARD_MAILPIT_PORT:-1025}:1025'
      - '${FORWARD_MAILPIT_DASHBOARD_PORT:-8025}:8025'
    profiles: [ "web" ]
  selenium:
    image: '${SELENIUM_IMAGE:-selenium/standalone-chrome}'
    logging:
      driver: none #disable noisy output
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    volumes:
      - '/dev/shm:/dev/shm'
    ports:
      -  "5900:5900" #debug enable VNC access
    profiles: [ "test" ]
volumes:
  postgres: { }
  redis: { }
  assets: { }
  build_asset: { }
  bundle_cache: { }
  rails_cache: { }
  yarn_cache: {}
  node_modules_cache: {}
  minio: {}
  mailpit: {}

#  https://viblo.asia/p/deploy-elk-stack-voi-docker-Ny0VG7a5VPA elk stack